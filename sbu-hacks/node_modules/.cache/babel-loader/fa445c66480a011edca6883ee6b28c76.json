{"ast":null,"code":"(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory(require(\"react\"));else if (typeof define === 'function' && define.amd) define([\"react\"], factory);else if (typeof exports === 'object') exports[\"Webcam\"] = factory(require(\"react\"));else root[\"Webcam\"] = factory(root[\"React\"]);\n})(this, function (__WEBPACK_EXTERNAL_MODULE_react__) {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId]) {\n          /******/\n          return installedModules[moduleId].exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = installedModules[moduleId] = {\n          /******/\n          i: moduleId,\n\n          /******/\n          l: false,\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.l = true;\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /******/\n\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n\n      /******/\n      // define getter function for harmony exports\n\n      /******/\n\n      __webpack_require__.d = function (exports, name, getter) {\n        /******/\n        if (!__webpack_require__.o(exports, name)) {\n          /******/\n          Object.defineProperty(exports, name, {\n            enumerable: true,\n            get: getter\n          });\n          /******/\n        }\n        /******/\n\n      };\n      /******/\n\n      /******/\n      // define __esModule on exports\n\n      /******/\n\n\n      __webpack_require__.r = function (exports) {\n        /******/\n        if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n          /******/\n          Object.defineProperty(exports, Symbol.toStringTag, {\n            value: 'Module'\n          });\n          /******/\n        }\n        /******/\n\n\n        Object.defineProperty(exports, '__esModule', {\n          value: true\n        });\n        /******/\n      };\n      /******/\n\n      /******/\n      // create a fake namespace object\n\n      /******/\n      // mode & 1: value is a module id, require it\n\n      /******/\n      // mode & 2: merge all properties of value into the ns\n\n      /******/\n      // mode & 4: return value when already ns object\n\n      /******/\n      // mode & 8|1: behave like require\n\n      /******/\n\n\n      __webpack_require__.t = function (value, mode) {\n        /******/\n        if (mode & 1) value = __webpack_require__(value);\n        /******/\n\n        if (mode & 8) return value;\n        /******/\n\n        if (mode & 4 && typeof value === 'object' && value && value.__esModule) return value;\n        /******/\n\n        var ns = Object.create(null);\n        /******/\n\n        __webpack_require__.r(ns);\n        /******/\n\n\n        Object.defineProperty(ns, 'default', {\n          enumerable: true,\n          value: value\n        });\n        /******/\n\n        if (mode & 2 && typeof value != 'string') for (var key in value) __webpack_require__.d(ns, key, function (key) {\n          return value[key];\n        }.bind(null, key));\n        /******/\n\n        return ns;\n        /******/\n      };\n      /******/\n\n      /******/\n      // getDefaultExport function for compatibility with non-harmony modules\n\n      /******/\n\n\n      __webpack_require__.n = function (module) {\n        /******/\n        var getter = module && module.__esModule ?\n        /******/\n        function getDefault() {\n          return module['default'];\n        } :\n        /******/\n        function getModuleExports() {\n          return module;\n        };\n        /******/\n\n        __webpack_require__.d(getter, 'a', getter);\n        /******/\n\n\n        return getter;\n        /******/\n      };\n      /******/\n\n      /******/\n      // Object.prototype.hasOwnProperty.call\n\n      /******/\n\n\n      __webpack_require__.o = function (object, property) {\n        return Object.prototype.hasOwnProperty.call(object, property);\n      };\n      /******/\n\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n\n      __webpack_require__.p = \"\";\n      /******/\n\n      /******/\n\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(__webpack_require__.s = \"./src/react-webcam.tsx\");\n      /******/\n    }(\n    /************************************************************************/\n\n    /******/\n    {\n      /***/\n      \"./src/react-webcam.tsx\":\n      /*!******************************!*\\\n        !*** ./src/react-webcam.tsx ***!\n        \\******************************/\n\n      /*! exports provided: default */\n\n      /***/\n      function (module, __webpack_exports__, __webpack_require__) {\n        \"use strict\";\n\n        eval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"default\\\", function() { return Webcam; });\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \\\"react\\\");\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\\nvar __rest = (undefined && undefined.__rest) || function (s, e) {\\n    var t = {};\\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\\n        t[p] = s[p];\\n    if (s != null && typeof Object.getOwnPropertySymbols === \\\"function\\\")\\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\\n                t[p[i]] = s[p[i]];\\n        }\\n    return t;\\n};\\n\\nfunction hasGetUserMedia() {\\n    return !!((navigator.mediaDevices && navigator.mediaDevices.getUserMedia) ||\\n        navigator.webkitGetUserMedia ||\\n        navigator.mozGetUserMedia ||\\n        navigator.msGetUserMedia);\\n}\\nclass Webcam extends react__WEBPACK_IMPORTED_MODULE_0__[\\\"Component\\\"] {\\n    constructor(props) {\\n        super(props);\\n        this.ctx = null;\\n        this.state = {\\n            hasUserMedia: false\\n        };\\n    }\\n    componentDidMount() {\\n        if (!hasGetUserMedia())\\n            return;\\n        const { state } = this;\\n        Webcam.mountedInstances.push(this);\\n        if (!state.hasUserMedia && !Webcam.userMediaRequested) {\\n            this.requestUserMedia();\\n        }\\n    }\\n    componentDidUpdate(nextProps) {\\n        const { props } = this;\\n        if (JSON.stringify(nextProps.audioConstraints) !==\\n            JSON.stringify(props.audioConstraints) ||\\n            JSON.stringify(nextProps.videoConstraints) !==\\n                JSON.stringify(props.videoConstraints)) {\\n            this.requestUserMedia();\\n        }\\n    }\\n    componentWillUnmount() {\\n        const { state } = this;\\n        const index = Webcam.mountedInstances.indexOf(this);\\n        Webcam.mountedInstances.splice(index, 1);\\n        Webcam.userMediaRequested = false;\\n        if (Webcam.mountedInstances.length === 0 && state.hasUserMedia) {\\n            if (this.stream.getVideoTracks && this.stream.getAudioTracks) {\\n                this.stream.getVideoTracks().map(track => track.stop());\\n                this.stream.getAudioTracks().map(track => track.stop());\\n            }\\n            else {\\n                this.stream.stop();\\n            }\\n            if (state.src) {\\n                window.URL.revokeObjectURL(state.src);\\n            }\\n        }\\n    }\\n    getScreenshot() {\\n        const { state, props } = this;\\n        if (!state.hasUserMedia)\\n            return null;\\n        const canvas = this.getCanvas();\\n        return (canvas &&\\n            canvas.toDataURL(props.screenshotFormat, props.screenshotQuality));\\n    }\\n    getCanvas() {\\n        const { state, props } = this;\\n        if (!this.video) {\\n            return null;\\n        }\\n        if (!state.hasUserMedia || !this.video.videoHeight)\\n            return null;\\n        if (!this.ctx) {\\n            const canvas = document.createElement(\\\"canvas\\\");\\n            const aspectRatio = this.video.videoWidth / this.video.videoHeight;\\n            let canvasWidth = props.minScreenshotWidth || this.video.clientWidth;\\n            let canvasHeight = canvasWidth / aspectRatio;\\n            if (props.minScreenshotHeight &&\\n                canvasHeight < props.minScreenshotHeight) {\\n                canvasHeight = props.minScreenshotHeight;\\n                canvasWidth = canvasHeight * aspectRatio;\\n            }\\n            canvas.width = canvasWidth;\\n            canvas.height = canvasHeight;\\n            this.canvas = canvas;\\n            this.ctx = canvas.getContext(\\\"2d\\\");\\n        }\\n        const { ctx, canvas } = this;\\n        if (ctx) {\\n            ctx.imageSmoothingEnabled = props.imageSmoothing;\\n            ctx.drawImage(this.video, 0, 0, canvas.width, canvas.height);\\n        }\\n        return canvas;\\n    }\\n    requestUserMedia() {\\n        const { props } = this;\\n        navigator.getUserMedia =\\n            navigator.mediaDevices.getUserMedia ||\\n                navigator.webkitGetUserMedia ||\\n                navigator.mozGetUserMedia ||\\n                navigator.msGetUserMedia;\\n        const sourceSelected = (audioConstraints, videoConstraints) => {\\n            const constraints = {\\n                video: typeof videoConstraints !== \\\"undefined\\\" ? videoConstraints : true\\n            };\\n            if (props.audio) {\\n                constraints.audio =\\n                    typeof audioConstraints !== \\\"undefined\\\" ? audioConstraints : true;\\n            }\\n            navigator.mediaDevices\\n                .getUserMedia(constraints)\\n                .then(stream => {\\n                Webcam.mountedInstances.forEach(instance => instance.handleUserMedia(null, stream));\\n            })\\n                .catch(e => {\\n                Webcam.mountedInstances.forEach(instance => instance.handleUserMedia(e));\\n            });\\n        };\\n        if (\\\"mediaDevices\\\" in navigator) {\\n            sourceSelected(props.audioConstraints, props.videoConstraints);\\n        }\\n        else {\\n            const optionalSource = id => ({ optional: [{ sourceId: id }] });\\n            const constraintToSourceId = constraint => {\\n                const { deviceId } = constraint;\\n                if (typeof deviceId === \\\"string\\\") {\\n                    return deviceId;\\n                }\\n                if (Array.isArray(deviceId) && deviceId.length > 0) {\\n                    return deviceId[0];\\n                }\\n                if (typeof deviceId === \\\"object\\\" && deviceId.ideal) {\\n                    return deviceId.ideal;\\n                }\\n                return null;\\n            };\\n            // @ts-ignore: deprecated api\\n            MediaStreamTrack.getSources(sources => {\\n                let audioSource = null;\\n                let videoSource = null;\\n                sources.forEach(source => {\\n                    if (source.kind === \\\"audio\\\") {\\n                        audioSource = source.id;\\n                    }\\n                    else if (source.kind === \\\"video\\\") {\\n                        videoSource = source.id;\\n                    }\\n                });\\n                const audioSourceId = constraintToSourceId(props.audioConstraints);\\n                if (audioSourceId) {\\n                    audioSource = audioSourceId;\\n                }\\n                const videoSourceId = constraintToSourceId(props.videoConstraints);\\n                if (videoSourceId) {\\n                    videoSource = videoSourceId;\\n                }\\n                sourceSelected(optionalSource(audioSource), optionalSource(videoSource));\\n            });\\n        }\\n        Webcam.userMediaRequested = true;\\n    }\\n    handleUserMedia(err, stream) {\\n        const { props } = this;\\n        if (err || !stream) {\\n            this.setState({ hasUserMedia: false });\\n            props.onUserMediaError(err);\\n            return;\\n        }\\n        this.stream = stream;\\n        try {\\n            if (this.video) {\\n                this.video.srcObject = stream;\\n            }\\n            this.setState({ hasUserMedia: true });\\n        }\\n        catch (error) {\\n            this.setState({\\n                hasUserMedia: true,\\n                src: window.URL.createObjectURL(stream)\\n            });\\n        }\\n        props.onUserMedia();\\n    }\\n    render() {\\n        const { state, props } = this;\\n        const { audio, onUserMedia, onUserMediaError, screenshotFormat, screenshotQuality, minScreenshotWidth, minScreenshotHeight, audioConstraints, videoConstraints, imageSmoothing } = props, rest = __rest(props, [\\\"audio\\\", \\\"onUserMedia\\\", \\\"onUserMediaError\\\", \\\"screenshotFormat\\\", \\\"screenshotQuality\\\", \\\"minScreenshotWidth\\\", \\\"minScreenshotHeight\\\", \\\"audioConstraints\\\", \\\"videoConstraints\\\", \\\"imageSmoothing\\\"]);\\n        return (react__WEBPACK_IMPORTED_MODULE_0__[\\\"createElement\\\"](\\\"video\\\", Object.assign({ autoPlay: true, src: state.src, muted: audio, playsInline: true, ref: ref => {\\n                this.video = ref;\\n            } }, rest)));\\n    }\\n}\\nWebcam.defaultProps = {\\n    audio: true,\\n    imageSmoothing: true,\\n    onUserMedia: () => { },\\n    onUserMediaError: () => { },\\n    screenshotFormat: \\\"image/webp\\\",\\n    screenshotQuality: 0.92\\n};\\nWebcam.mountedInstances = [];\\nWebcam.userMediaRequested = false;\\n\\n\\n//# sourceURL=webpack://Webcam/./src/react-webcam.tsx?\");\n        /***/\n      },\n\n      /***/\n      \"react\":\n      /*!**************************************************************************************!*\\\n        !*** external {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"} ***!\n        \\**************************************************************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function (module, exports) {\n        eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE_react__;\\n\\n//# sourceURL=webpack://Webcam/external_%7B%22root%22:%22React%22,%22commonjs2%22:%22react%22,%22commonjs%22:%22react%22,%22amd%22:%22react%22%7D?\");\n        /***/\n      }\n      /******/\n\n    })[\"default\"]\n  );\n});","map":null,"metadata":{},"sourceType":"script"}